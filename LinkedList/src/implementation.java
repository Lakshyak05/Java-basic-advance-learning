public class implementation {    public static class Node{        int data;        Node next;        Node(int data){            this.data = data;        }    }    public static class linkedlist{        Node head = null;        Node tail = null;        void InsertAtEnd(int val){            Node temp = new Node(val);            if(head == null){       // Empty List                head = temp;            }else{                tail.next = temp;            }            tail = temp;        }        void InsertAtBeginning(int val){            Node temp = new Node(val);            if(head == null){   // Empty List//                head = tail = temp;                InsertAtEnd(val);            }else{                temp.next = head;                head = temp;            }        }        void insertAt(int idx, int val){            Node t = new Node(val);            Node temp = head;            if(idx == size()){  // To point tail to the end if idx == size                InsertAtEnd(val);                return;            } else if (idx == 0) {                InsertAtBeginning(val);                return;            } else if (idx > size()) {                System.out.println("wrong input");            } else if (idx < 0) {                System.out.println("wrong input");            }            for (int i = 1; i <= idx-1 ; i++) {  //30 -> 20 -> 10                temp = temp.next;            }            t.next = temp.next;            temp.next = t;        }        int getAt(int idx){            Node temp = head;            if (idx > size()) {                System.out.println("wrong input");                return -1;            } else if (idx < 0) {                System.out.println("wrong input");                return -1;            }            for (int i = 1; i <= idx ; i++) {                temp = temp.next;            }            return temp.data;        }        void deleteAt(int idx){            Node temp = head;            for (int i = 1; i <= idx-1 ; i++) {                temp = temp.next;            }            temp.next = temp.next.next;            size--;        }        int size(){            Node temp = head;            int count = 0;            while(temp!=null){                count++;                temp = temp.next;            }            return count;        }        void display(){            Node temp = head;            while(temp!=null){                System.out.print(temp.data + " ");                temp = temp.next;            }        }    }    public static void main(String[] args) {        linkedlist ll = new linkedlist();        ll.InsertAtEnd(4);        ll.InsertAtEnd(5);        ll.InsertAtEnd(12);        ll.InsertAtBeginning(13);//        ll.InsertAtBeginning(20);//        ll.InsertAtBeginning(30);//        ll.insertAt(1,55);        ll.insertAt(4,50);        ll.insertAt(0 ,100);        ll.display();        System.out.println();//        System.out.println(ll.head.data);        System.out.println(ll.getAt(3));        ll.deleteAt(2);        ll.display();    }}